CREATE TABLE collection
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uuid        UUID        NOT NULL UNIQUE,
    parent_uuid UUID,
    created_at  TIMESTAMPTZ NOT NULL DEFAULT now(),
    lft         BIGINT      NOT NULL,
    rgt         BIGINT      NOT NULL,
    depth       INT         NOT NULL DEFAULT 0,
    root_uuid   UUID,
    type        TEXT,
    CONSTRAINT ck_collection_not_self_parent CHECK (parent_uuid IS NULL OR parent_uuid <> uuid),
    CONSTRAINT fk_root_uuid FOREIGN KEY (root_uuid) REFERENCES collection (uuid),
    CONSTRAINT fk_collection_parent FOREIGN KEY (parent_uuid) REFERENCES collection (uuid) ON DELETE SET NULL,
    CONSTRAINT ck_collection_lft_rgt CHECK (lft IS NULL AND rgt IS NULL OR
                                            (lft IS NOT NULL AND rgt IS NOT NULL AND lft < rgt))
);

CREATE INDEX ix_collection_parent_uuid ON collection (parent_uuid);

CREATE UNIQUE INDEX uq_collection_root_per_tree
    ON collection (root_uuid)
    WHERE parent_uuid IS NULL;

CREATE TABLE event
(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uuid            UUID        NOT NULL UNIQUE,
    created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
    user_details    JSONB       NOT NULL,
    collection_uuid UUID        NOT NULL,
    data            JSONB       NOT NULL,
    CONSTRAINT fk_event_collection FOREIGN KEY (collection_uuid) REFERENCES collection (uuid) ON DELETE CASCADE
);

CREATE INDEX ix_event_collection_uuid ON event (collection_uuid);

CREATE TABLE aggregate
(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uuid            UUID                                              NOT NULL UNIQUE,
    updated_at      TIMESTAMPTZ                                       NOT NULL DEFAULT now(),
    events_from     TIMESTAMPTZ                                       NOT NULL,
    events_to       TIMESTAMPTZ                                       NOT NULL,
    collection_uuid UUID                                              NOT NULL,
    data            JSONB                                             NOT NULL,
    data_type       TEXT GENERATED ALWAYS AS (data ->> 'type') STORED NOT NULL,
    CONSTRAINT ck_aggregate_range CHECK (events_from <= events_to),
    CONSTRAINT uq_aggregate_window UNIQUE (collection_uuid, data_type, events_from, events_to),
    CONSTRAINT fk_aggregate_collection FOREIGN KEY (collection_uuid) REFERENCES collection (uuid) ON DELETE CASCADE
);

CREATE INDEX ix_aggregate_collection_uuid ON aggregate (collection_uuid);
